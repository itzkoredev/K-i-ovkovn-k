#!/usr/bin/env node

/**
 * TEST EASY TAJENKA PATTERNU
 */

console.log('üß™ TEST NOV√âHO EASY TAJENKA PATTERNU\n');

// Simulace patternu
const pattern = {
  width: 13,
  height: 13,
  tajenkiRows: [6], // prost≈ôedn√≠ ≈ô√°dek
};

const layout = [
  '...#...#...#.', // ≈ô√°dek 0
  '...#...#...#.', // ≈ô√°dek 1
  '.#.#.#.#.#.#.', // ≈ô√°dek 2
  '...#...#...#.', // ≈ô√°dek 3
  '...#...#...#.', // ≈ô√°dek 4
  '.#.......#.#.', // ≈ô√°dek 5
  '.............', // ≈ô√°dek 6 - TAJENKA (plnƒõ pr≈Øchoz√≠!)
  '.#.#.......#.', // ≈ô√°dek 7
  '...#...#...#.', // ≈ô√°dek 8
  '...#...#...#.', // ≈ô√°dek 9
  '.#.#.#.#.#.#.', // ≈ô√°dek 10
  '...#...#...#.', // ≈ô√°dek 11
  '...#...#...#.'  // ≈ô√°dek 12
];

console.log('üìê Pattern velikost:', pattern.width + '√ó' + pattern.height);
console.log('üü° Tajenka ≈ô√°dek:', pattern.tajenkiRows[0] + 1, '(index', pattern.tajenkiRows[0] + ')');

// Spoƒç√≠tej ƒçern√° pole
let blackCount = 0;
layout.forEach(row => {
  blackCount += (row.match(/#/g) || []).length;
});
console.log('‚¨õ ƒåern√Ωch pol√≠:', blackCount);
console.log('‚¨ú B√≠l√Ωch pol√≠:', (13 * 13) - blackCount);

// Tajenka ≈ô√°dek anal√Ωza
const tajenkaRowIndex = 6;
const tajenkaRowStr = layout[tajenkaRowIndex];
console.log('\nüéØ TAJENKA ≈ò√ÅDEK:');
console.log('   Pattern:', tajenkaRowStr);
console.log('   D√©lka:', tajenkaRowStr.replace(/#/g, '').length, 'p√≠smen');
console.log('   ƒåern√Ωch pol√≠:', (tajenkaRowStr.match(/#/g) || []).length);

// Anal√Ωza vertik√°ln√≠ch slot≈Ø
console.log('\nüìä VERTIK√ÅLN√ç SLOTY K≈ò√ç≈Ω√çC√ç TAJENKU:');
let crossingSlots = 0;
for (let x = 0; x < 13; x++) {
  let hasSlot = false;
  for (let y = 0; y < 13; y++) {
    if (layout[y][x] !== '#' && y === 6) {
      // Je to b√≠l√° bu≈àka v tajenka ≈ô√°dku
      // Zkontroluj jestli je souƒç√°st√≠ vertik√°ln√≠ho slotu
      let slotLength = 0;
      let slotStart = y;
      while (slotStart > 0 && layout[slotStart - 1][x] !== '#') {
        slotStart--;
      }
      for (let sy = slotStart; sy < 13 && layout[sy][x] !== '#'; sy++) {
        slotLength++;
      }
      if (slotLength >= 2) {
        hasSlot = true;
        console.log(`   Sloupec ${x + 1}: vertik√°ln√≠ slot d√©lky ${slotLength} (k≈ô√≠≈æ√≠ tajenku)`);
        crossingSlots++;
      }
      break;
    }
  }
}
console.log('\n‚úÖ Celkem vertik√°ln√≠ch slot≈Ø k≈ô√≠≈æ√≠c√≠ch tajenku:', crossingSlots);

// Anal√Ωza horizont√°ln√≠ch slot≈Ø
console.log('\nüìä HORIZONT√ÅLN√ç SLOTY (mimo tajenku):');
let horizontalSlots = 0;
for (let y = 0; y < 13; y++) {
  if (y === 6) continue; // p≈ôeskoƒç tajenka ≈ô√°dek
  
  let slotStart = -1;
  for (let x = 0; x <= 13; x++) {
    const isBlack = x === 13 || layout[y][x] === '#';
    
    if (!isBlack && slotStart === -1) {
      slotStart = x;
    } else if (isBlack && slotStart !== -1) {
      const slotLength = x - slotStart;
      if (slotLength >= 2) {
        console.log(`   ≈ò√°dek ${y + 1}: horizontal slot d√©lky ${slotLength}`);
        horizontalSlots++;
      }
      slotStart = -1;
    }
  }
}
console.log('\n‚úÖ Celkem horizont√°ln√≠ch slot≈Ø:', horizontalSlots);

console.log('\nüìà SHRNUT√ç:');
console.log('   Vertik√°ln√≠ sloty:', crossingSlots);
console.log('   Horizont√°ln√≠ sloty:', horizontalSlots);
console.log('   Celkem slot≈Ø:', crossingSlots + horizontalSlots);
console.log('   Tajenka d√©lka:', tajenkaRowStr.replace(/#/g, '').length, 'p√≠smen');

console.log('\n‚úÖ Pattern vypad√° OK pro generov√°n√≠ k≈ô√≠≈æovky s tajenkou!');
