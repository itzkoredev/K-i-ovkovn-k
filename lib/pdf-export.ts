import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import type { Crossword } from '@/types/crossword';

// Funkce pro spr√°vn√© k√≥dov√°n√≠ ƒçesk√Ωch znak≈Ø
function encodeCzechText(text: string): string {
  return text
    .replace(/√°/g, '\u00E1')
    .replace(/ƒç/g, '\u010D')
    .replace(/ƒè/g, '\u010F')
    .replace(/√©/g, '\u00E9')
    .replace(/ƒõ/g, '\u011B')
    .replace(/√≠/g, '\u00ED')
    .replace(/≈à/g, '\u0148')
    .replace(/√≥/g, '\u00F3')
    .replace(/≈ô/g, '\u0159')
    .replace(/≈°/g, '\u0161')
    .replace(/≈•/g, '\u0165')
    .replace(/√∫/g, '\u00FA')
    .replace(/≈Ø/g, '\u016F')
    .replace(/√Ω/g, '\u00FD')
    .replace(/≈æ/g, '\u017E')
    .replace(/√Å/g, '\u00C1')
    .replace(/ƒå/g, '\u010C')
    .replace(/ƒé/g, '\u010E')
    .replace(/√â/g, '\u00C9')
    .replace(/ƒö/g, '\u011A')
    .replace(/√ç/g, '\u00CD')
    .replace(/≈á/g, '\u0147')
    .replace(/√ì/g, '\u00D3')
    .replace(/≈ò/g, '\u0158')
    .replace(/≈†/g, '\u0160')
    .replace(/≈§/g, '\u0164')
    .replace(/√ö/g, '\u00DA')
    .replace(/≈Æ/g, '\u016E')
    .replace(/√ù/g, '\u00DD')
    .replace(/≈Ω/g, '\u017D');
}

export function exportToPDF(crossword: Crossword): void {
  const doc = new jsPDF({
    orientation: 'portrait',
    unit: 'mm',
    format: 'a4',
    compress: true,
  }) as jsPDF & { autoTable: typeof autoTable };

  const pageWidth = 210;
  const pageHeight = 297;
  const margin = 20;
  const usableWidth = pageWidth - 2 * margin;
  
  // === STR√ÅNKA 1: TITULKA ===
  
  // Gradient pozad√≠ - modr√° hlaviƒçka
  doc.setFillColor(59, 130, 246);
  doc.rect(0, 0, pageWidth, 50, 'F');
  
  // Dekorativn√≠ pruhy
  doc.setFillColor(96, 165, 250);
  doc.rect(0, 50, pageWidth, 3, 'F');
  doc.setFillColor(147, 197, 253);
  doc.rect(0, 53, pageWidth, 2, 'F');
  
  // Hlavn√≠ titulek
  doc.setTextColor(255, 255, 255);
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(36);
  doc.text(encodeCzechText('ƒåESK√Å K≈ò√ç≈ΩOVKA'), pageWidth / 2, 30, { align: 'center' });
  
  // Podnadpis
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  doc.text(encodeCzechText('Profesion√°ln√≠ gener√°tor k≈ô√≠≈æovek'), pageWidth / 2, 40, { align: 'center' });
  
  // Informaƒçn√≠ box
  doc.setFillColor(248, 250, 252);
  doc.roundedRect(margin, 65, usableWidth, 25, 3, 3, 'F');
  doc.setDrawColor(226, 232, 240);
  doc.setLineWidth(0.5);
  doc.roundedRect(margin, 65, usableWidth, 25, 3, 3, 'S');
  
  // Metadata
  doc.setTextColor(51, 65, 85);
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(11);
  
  const difficultyLabels = {
    lehka: 'Lehk√°',
    stredni: 'St≈ôedn√≠',
    tezka: 'Tƒõ≈æk√°',
  };
  
  const themeLabels: Record<string, string> = {
    vsechny: 'V≈°echna t√©mata',
    priroda: 'P≈ô√≠roda',
    sport: 'Sport',
    kultura: 'Kultura',
    veda: 'Vƒõda',
    geografie: 'Geografie',
    historie: 'Historie',
    jidlo: 'J√≠dlo',
    zvirata: 'Zv√≠≈ôata',
    technika: 'Technika',
    hudba: 'Hudba',
    film: 'Film & TV',
    divadlo: 'Divadlo',
    umeni: 'Umƒõn√≠',
    literatura: 'Literatura',
    'nabozenst vi': 'N√°bo≈æenstv√≠',
    politika: 'Politika',
    ekonomie: 'Ekonomie',
    medicina: 'Medic√≠na',
    astronomie: 'Astronomie',
    doprava: 'Doprava',
    cestovani: 'Cestov√°n√≠',
    moda: 'M√≥da',
    architektura: 'Architektura',
    zahradnictvi: 'Zahradnictv√≠',
  };
  
  const date = new Date().toLocaleDateString('cs-CZ', {
    day: 'numeric',
    month: 'long',
    year: 'numeric',
  });
  
  // Form√°tovat t√©mata
  const themesText = crossword.settings.themes.includes('vsechny')
    ? 'V≈°echna t√©mata'
    : crossword.settings.themes.map(t => themeLabels[t] || t).join(', ');
  
  // Prvn√≠ ≈ô√°dek metadat
  doc.text(encodeCzechText('üìä Obt√≠≈ænost: '), margin + 5, 75);
  doc.setFont('helvetica', 'normal');
  doc.text(encodeCzechText(difficultyLabels[crossword.settings.difficulty]), margin + 35, 75);
  
  doc.setFont('helvetica', 'bold');
  doc.text(encodeCzechText('üé® T√©mata: '), margin + 70, 75);
  doc.setFont('helvetica', 'normal');
  
  // Pokud je text moc dlouh√Ω, zkr√°tit nebo zabalit
  const maxThemeWidth = usableWidth - 90;
  const themeTextWidth = doc.getTextWidth(encodeCzechText(themesText));
  
  if (themeTextWidth > maxThemeWidth) {
    // Zkr√°tit text s "..."
    const shortened = themesText.length > 30 ? themesText.substring(0, 27) + '...' : themesText;
    doc.text(encodeCzechText(shortened), margin + 92, 75);
  } else {
    doc.text(encodeCzechText(themesText), margin + 92, 75);
  }
  
  // Druh√Ω ≈ô√°dek metadat
  doc.setFont('helvetica', 'bold');
  doc.text(encodeCzechText('üìê Velikost: '), margin + 5, 83);
  doc.setFont('helvetica', 'normal');
  doc.text(`${crossword.grid.length} √ó ${crossword.grid.length}`, margin + 35, 83);
  
  doc.setFont('helvetica', 'bold');
  doc.text(encodeCzechText('üìÖ Datum: '), margin + 70, 83);
  doc.setFont('helvetica', 'normal');
  doc.text(encodeCzechText(date), margin + 90, 83);
  
  // === K≈ò√ç≈ΩOVKA ===
  
  const gridSize = crossword.grid.length;
  const maxCellSize = 8;
  const cellSize = Math.min((usableWidth - 10) / gridSize, maxCellSize);
  const gridWidth = cellSize * gridSize;
  const gridX = (pageWidth - gridWidth) / 2;
  let currentY = 100;
  
  // Sekce s k≈ô√≠≈æovkou
  doc.setFillColor(255, 255, 255);
  doc.roundedRect(gridX - 5, currentY - 5, gridWidth + 10, gridWidth + 10, 2, 2, 'F');
  doc.setDrawColor(203, 213, 225);
  doc.setLineWidth(1);
  doc.roundedRect(gridX - 5, currentY - 5, gridWidth + 10, gridWidth + 10, 2, 2, 'S');
  
  // Kreslen√≠ m≈ô√≠≈æky s lep≈°√≠m stylingem
  doc.setLineWidth(0.3);
  doc.setDrawColor(71, 85, 105);
  
  for (let y = 0; y < gridSize; y++) {
    for (let x = 0; x < gridSize; x++) {
      const cell = crossword.grid[y][x];
      const cellX = gridX + x * cellSize;
      const cellY = currentY + y * cellSize;
      
      if (cell.isBlack) {
        // ƒåern√° bu≈àka
        doc.setFillColor(50, 50, 50);
        doc.rect(cellX, cellY, cellSize, cellSize, 'FD');
      } else {
        // B√≠l√° bu≈àka pro vypl≈àov√°n√≠
        if (cell.isTajenka) {
          // Tajenka - ≈ælut√Ω zv√Ωraznƒõn√≠
          doc.setFillColor(255, 248, 220);
          doc.rect(cellX, cellY, cellSize, cellSize, 'FD');
        } else {
          doc.setFillColor(255, 255, 255);
          doc.rect(cellX, cellY, cellSize, cellSize, 'FD');
        }
        
        // ƒå√≠slo pol√≠ƒçka v lev√©m horn√≠m rohu
        if (cell.number) {
          doc.setTextColor(30, 64, 175);
          doc.setFontSize(Math.max(5, cellSize * 0.35));
          doc.setFont('helvetica', 'bold');
          doc.text(cell.number.toString(), cellX + 0.8, cellY + 2.2);
        }
        
        // N√°povƒõda v prav√©m horn√≠m rohu
        if (cell.napoveda) {
          doc.setTextColor(22, 163, 74);
          doc.setFontSize(Math.max(4, cellSize * 0.30));
          doc.setFont('helvetica', 'bold');
          doc.text(cell.napoveda, cellX + cellSize - 2, cellY + 2);
        }
      }
    }
  }
  
  currentY += gridWidth + 20;
  
  // === OT√ÅZKY ===
  doc.addPage();
  
  // Hlaviƒçka ot√°zek
  doc.setFillColor(59, 130, 246);
  doc.rect(0, 0, pageWidth, 35, 'F');
  
  doc.setTextColor(255, 255, 255);
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(24);
  doc.text(encodeCzechText('OT√ÅZKY'), pageWidth / 2, 22, { align: 'center' });
  
  const horizontal = crossword.words
    .filter(w => w.direction === 'horizontal')
    .sort((a, b) => a.number - b.number);
  
  const vertical = crossword.words
    .filter(w => w.direction === 'vertical')
    .sort((a, b) => a.number - b.number);
  
  currentY = 50;
  
  // Vodorovnƒõ - lev√° polovina
  doc.setFillColor(239, 246, 255);
  doc.roundedRect(margin, currentY - 5, (usableWidth / 2) - 5, 15, 2, 2, 'F');
  
  doc.setTextColor(29, 78, 216);
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(14);
  doc.text(encodeCzechText('‚Üí Vodorovnƒõ'), margin + 3, currentY + 5);
  currentY += 18;
  
  doc.setTextColor(51, 65, 85);
  doc.setFontSize(9);
  doc.setFont('helvetica', 'normal');
  
  const startYHorizontal = currentY;
  
  horizontal.forEach((word) => {
    if (currentY > pageHeight - margin - 15) {
      currentY = startYHorizontal;
      return;
    }
    
    const clueText = `${word.number}. ${encodeCzechText(word.clue)} (${word.length})`;
    const lines = doc.splitTextToSize(clueText, (usableWidth / 2) - 10);
    
    lines.forEach((line: string) => {
      doc.text(line, margin + 2, currentY);
      currentY += 4.5;
    });
    currentY += 1;
  });
  
  // Svisle - prav√° polovina
  currentY = 50;
  const rightColumn = margin + (usableWidth / 2) + 5;
  
  doc.setFillColor(243, 244, 246);
  doc.roundedRect(rightColumn, currentY - 5, (usableWidth / 2) - 5, 15, 2, 2, 'F');
  
  doc.setTextColor(124, 58, 237);
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(14);
  doc.text(encodeCzechText('‚Üì Svisle'), rightColumn + 3, currentY + 5);
  currentY += 18;
  
  doc.setTextColor(51, 65, 85);
  doc.setFontSize(9);
  doc.setFont('helvetica', 'normal');
  
  vertical.forEach((word) => {
    if (currentY > pageHeight - margin - 15) {
      doc.addPage();
      currentY = margin + 10;
    }
    
    const clueText = `${word.number}. ${encodeCzechText(word.clue)} (${word.length})`;
    const lines = doc.splitTextToSize(clueText, (usableWidth / 2) - 10);
    
    lines.forEach((line: string) => {
      doc.text(line, rightColumn + 2, currentY);
      currentY += 4.5;
    });
    currentY += 1;
  });
  
  // === TAJENKA ===
  if (crossword.tajenka) {
    currentY += 20;
    if (currentY > pageHeight - margin - 40) {
      doc.addPage();
      currentY = margin + 20;
    }
    
    doc.setFillColor(252, 211, 77);
    doc.roundedRect(margin, currentY, usableWidth, 30, 3, 3, 'F');
    doc.setDrawColor(245, 158, 11);
    doc.setLineWidth(1.5);
    doc.roundedRect(margin, currentY, usableWidth, 30, 3, 3, 'S');
    
    doc.setTextColor(146, 64, 14);
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(11);
    doc.text(encodeCzechText('TAJENKA:'), pageWidth / 2, currentY + 10, { align: 'center' });
    
    doc.setFontSize(18);
    doc.setTextColor(120, 53, 15);
    doc.text(encodeCzechText(crossword.tajenka), pageWidth / 2, currentY + 22, { align: 'center' });
  }
  
  // === ≈òE≈†EN√ç ===
  if (crossword.settings.showSolution) {
    doc.addPage();
    
    // Hlaviƒçka ≈ôe≈°en√≠
    doc.setFillColor(16, 185, 129);
    doc.rect(0, 0, pageWidth, 35, 'F');
    
    doc.setTextColor(255, 255, 255);
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(24);
    doc.text(encodeCzechText('‚úì ≈òE≈†EN√ç'), pageWidth / 2, 22, { align: 'center' });
    
    currentY = 50;
    
    // M≈ô√≠≈æka s ≈ôe≈°en√≠m
    doc.setFillColor(255, 255, 255);
    doc.roundedRect(gridX - 5, currentY - 5, gridWidth + 10, gridWidth + 10, 2, 2, 'F');
    doc.setDrawColor(203, 213, 225);
    doc.setLineWidth(1);
    doc.roundedRect(gridX - 5, currentY - 5, gridWidth + 10, gridWidth + 10, 2, 2, 'S');
    
    doc.setLineWidth(0.3);
    doc.setDrawColor(71, 85, 105);
    
    for (let y = 0; y < gridSize; y++) {
      for (let x = 0; x < gridSize; x++) {
        const cell = crossword.grid[y][x];
        const cellX = gridX + x * cellSize;
        const cellY = currentY + y * cellSize;
        
        if (cell.isBlack) {
          // ƒåern√° bu≈àka
          doc.setFillColor(50, 50, 50);
          doc.rect(cellX, cellY, cellSize, cellSize, 'FD');
        } else {
          // Zelen√© pozad√≠ pro ≈ôe≈°en√≠
          if (cell.isTajenka) {
            doc.setFillColor(255, 248, 220);
          } else {
            doc.setFillColor(240, 253, 244);
          }
          doc.rect(cellX, cellY, cellSize, cellSize, 'FD');
          
          // ƒå√≠slo pol√≠ƒçka v lev√©m horn√≠m rohu
          if (cell.number) {
            doc.setTextColor(30, 64, 175);
            doc.setFontSize(Math.max(5, cellSize * 0.35));
            doc.setFont('helvetica', 'bold');
            doc.text(cell.number.toString(), cellX + 0.8, cellY + 2.2);
          }
          
          // N√°povƒõda v prav√©m horn√≠m rohu
          if (cell.napoveda) {
            doc.setTextColor(22, 163, 74);
            doc.setFontSize(Math.max(4, cellSize * 0.30));
            doc.setFont('helvetica', 'bold');
            doc.text(cell.napoveda, cellX + cellSize - 2, cellY + 2);
          }
          
          // P√≠smeno ≈ôe≈°en√≠ - VƒöT≈†√ç A TUƒåNƒöJ≈†√ç
          if (cell.letter) {
            doc.setTextColor(5, 150, 105);
            doc.setFontSize(Math.max(7, cellSize * 0.65));
            doc.setFont('helvetica', 'bold');
            const letter = encodeCzechText(cell.letter);
            doc.text(
              letter,
              cellX + cellSize / 2,
              cellY + cellSize / 2 + 1.5,
              { align: 'center' }
            );
          }
        }
      }
    }
    
    // Gratulace
    currentY += gridWidth + 15;
    doc.setFillColor(236, 253, 245);
    doc.roundedRect(margin, currentY, usableWidth, 20, 2, 2, 'F');
    doc.setDrawColor(167, 243, 208);
    doc.roundedRect(margin, currentY, usableWidth, 20, 2, 2, 'S');
    
    doc.setTextColor(6, 95, 70);
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(12);
    doc.text(
      encodeCzechText('‚úì Gratulujeme! Pokud jste vylu≈°tili celou k≈ô√≠≈æovku spr√°vnƒõ!'),
      pageWidth / 2,
      currentY + 12,
      { align: 'center' }
    );
  }
  
  // Patiƒçka na v≈°ech str√°nk√°ch
  const pageCount = (doc as any).internal.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    
    // ƒå√°ra nad patiƒçkou
    doc.setDrawColor(226, 232, 240);
    doc.setLineWidth(0.5);
    doc.line(margin, pageHeight - 15, pageWidth - margin, pageHeight - 15);
    
    // Text patiƒçky
    doc.setTextColor(148, 163, 184);
    doc.setFont('helvetica', 'normal');
    doc.setFontSize(8);
    doc.text(
      encodeCzechText('Vygenerov√°no na K≈ôi≈æovkovn√≠k.cz'),
      margin,
      pageHeight - 10
    );
    doc.text(
      encodeCzechText(`Str√°nka ${i} z ${pageCount}`),
      pageWidth - margin,
      pageHeight - 10,
      { align: 'right' }
    );
  }
  
  // Ulo≈æen√≠ PDF
  const filename = `krizovka-${crossword.settings.difficulty}-${Date.now()}.pdf`;
  doc.save(filename);
}
